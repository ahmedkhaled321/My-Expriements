# -*- coding: utf-8 -*-
"""Smoker Prediction Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IQqQVxOmFcfrvIwiiFSta6MEzoLVPgkW
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""Concating Train And Test Dataframes into One Dataframe"""

# قراءة البيانات
train = pd.read_csv("/content/sample_data/train_dataset(1).csv",encoding='windows-1252')
test = pd.read_csv("/content/sample_data/train_dataset(1).csv",encoding='windows-1252')

# إضافة عمود يوضح مصدر البيانات (train/test)
train["dataset"] = "train"
test["dataset"] = "test"

# إذا كان test ما فيه target column، ممكن تضيف عمود target = NaN
if "smoking" not in test.columns:
    test["smoking"] = None

# دمج الاثنين
Smoking_Data = pd.concat([train, test], ignore_index=True)

"""Data Preprocessing"""

Smoking_Data

Smoking_Data[Smoking_Data['smoking']==None]

Smoking_Data.isnull().sum()

Duplicates_Value=Smoking_Data.duplicated().sum()

Duplicates_Value

Smoking_Data=Smoking_Data.drop_duplicates()

Smoking_Data.duplicated().sum()

Smoking_Data

Smoking_Data['waist(cm)']=Smoking_Data['waist(cm)'].astype('int')

Smoking_Data['eyesight(left)']=np.round(Smoking_Data['eyesight(left)'])

Smoking_Data['eyesight(left)']=Smoking_Data['eyesight(left)'].astype('int')

Smoking_Data

Smoking_Data['eyesight(right)']=np.round(Smoking_Data['eyesight(right)'])

Smoking_Data['eyesight(right)']=Smoking_Data['eyesight(right)'].astype('int')

Smoking_Data

Smoking_Data['hemoglobin']=np.round(Smoking_Data['hemoglobin'])

Smoking_Data['hemoglobin']=Smoking_Data['hemoglobin'].astype('int')

Smoking_Data

Smoking_Data['serum creatinine']=np.round(Smoking_Data['serum creatinine'])

Smoking_Data['serum creatinine']=Smoking_Data['serum creatinine'].astype('int')

Smoking_Data

Smoking_Data=Smoking_Data.drop(['dataset'],axis=1)

Smoking_Data

"""Detecting Outliers"""

numeric_df = df.select_dtypes(include=['int64', 'float64'])

# 3️⃣ إنشاء نموذج Isolation Forest
iso_forest = IsolationForest(
    contamination=0.2,  # نسبة الشذوذ المتوقعة (غيّرها حسب حالتك)
    random_state=42
)


# 4️⃣ التدريب والتنبؤ
df['anomaly'] = iso_forest.fit_predict(numeric_df)


# 1 = طبيعي , -1 = شاذ
print("\nعدد القيم الشاذة المكتشفة:", (df['anomaly'] == -1).sum())

Q1 = Smoking_Data['AST'].quantile(0.25)
Q3 = Smoking_Data['AST'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers = [x for x in Smoking_Data['AST'] if x < lower_bound or x > upper_bound]

c=0
for x in outliers:
  c=c+1

ratio=(Smoking_Data['AST'].count())/(c)

ratio=np.round(ratio)

ratio

Q1 = Smoking_Data['ALT'].quantile(0.25)
Q3 = Smoking_Data['ALT'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers1 = [x for x in Smoking_Data['ALT'] if x < lower_bound or x > upper_bound]

c1=0
for x in outliers1:
  c1=c1+1

ratio1=(Smoking_Data['ALT'].count())/(c1)

ratio1

ratio1=np.round(ratio1)

ratio1

Q1 = Smoking_Data['Gtp'].quantile(0.25)
Q3 = Smoking_Data['Gtp'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers3 = [x for x in Smoking_Data['Gtp'] if x < lower_bound or x > upper_bound]

c2=0
for x in outliers3:
  c2=c2+1

ratio2=(Smoking_Data['Gtp'].count())/(c2)

ratio2

ratio2=np.round(ratio2)

ratio2

Q1 = Smoking_Data['dental caries'].quantile(0.25)
Q3 = Smoking_Data['dental caries'].quantile(0.75)
IQR = Q3 - Q1

lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR

outliers4 = [x for x in Smoking_Data['dental caries'] if x < lower_bound or x > upper_bound]

c3=0
for x in outliers4:
  c3=c3+1

ratio3=(Smoking_Data['dental caries'].count())/(c3)

ratio3

ratio3=np.round(ratio3)

ratio3

from sklearn.preprocessing import MinMaxScaler
Scaler=MinMaxScaler()

Smoking_Data['AST']=Scaler.fit_transform(Smoking_Data[['AST']])

Smoking_Data

Smoking_Data['ALT']=Scaler.fit_transform(Smoking_Data[['ALT']])

Smoking_Data

Smoking_Data['Gtp']=Scaler.fit_transform(Smoking_Data[['Gtp']])

Smoking_Data

Smoking_Data.shape

Smoking_Data.info()

Smoking_Data.describe()

"""Data Visualzation

BoxPlot
"""

sns.boxplot(Smoking_Data['AST'])

sns.boxplot(Smoking_Data['ALT'])

sns.boxplot(Smoking_Data['Gtp'])

sns.boxplot(Smoking_Data['dental caries'])

"""HeatMap"""

Correlation=Smoking_Data.corr('pearson')

plt.figure(figsize=(30.0,20.0))
sns.heatmap(Correlation,annot=True,cmap='coolwarm')

from sklearn.feature_selection import mutual_info_classif

Input=Smoking_Data

Output=Smoking_Data['smoking']

InfoGainArray=mutual_info_classif(Input,Output,random_state=42)

from sklearn.preprocessing import StandardScaler

Sc=StandardScaler()

Smoking_Data_Scaled=Sc.fit_transform(Smoking_Data)

from sklearn.decomposition import PCA

Pca=PCA(n_components=2)

Smoking_Data_Pca=Pca.fit_transform(Smoking_Data_Scaled)

"""BarPlot"""

n = 23
# توليد ألوان عشوائية (RGB)
Colours = np.random.rand(n, 3)  # كل صف يمثل (R, G, B)

plt.figure(figsize=(10,5))
plt.bar(Smoking_Data.columns,InfoGainArray,color=Colours)
plt.xticks(rotation=90, ha='right')
plt.show()

"""ScatterPlot"""

plt.figure(figsize=(8,6))
plt.scatter(Smoking_Data_Pca[:,0], Smoking_Data_Pca[:,1], c=Output, cmap='viridis', edgecolor='k', s=50)
plt.xlabel("PrincipleComponent 1")
plt.ylabel('PrincipleComponent 2')
plt.title('PCA')
plt.colorbar()
plt.show()

# 5. نسبة التباين المفسر
print('Explained_Varaince_Ratio: ', Pca.explained_variance_ratio_)

#Showing Components
print(Pca.components_)

plt.figure(figsize=(15,10))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['height(cm)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(15,10))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['weight(kg)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(10,5))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['waist(cm)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(10,5))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['triglyceride'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(10,5))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['hemoglobin'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(10,5))
sns.scatterplot(x=Smoking_Data['smoking'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['height(cm)'],y=Smoking_Data['weight(kg)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['height(cm)'],y=Smoking_Data['waist(cm)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['height(cm)'],y=Smoking_Data['triglyceride'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['height(cm)'],y=Smoking_Data['hemoglobin'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['height(cm)'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['weight(kg)'],y=Smoking_Data['waist(cm)'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['weight(kg)'],y=Smoking_Data['triglyceride'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['weight(kg)'],y=Smoking_Data['hemoglobin'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['weight(kg)'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['waist(cm)'],y=Smoking_Data['triglyceride'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['waist(cm)'],y=Smoking_Data['hemoglobin'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['waist(cm)'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['triglyceride'],y=Smoking_Data['hemoglobin'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['triglyceride'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

plt.figure(figsize=(20,12))
sns.scatterplot(x=Smoking_Data['hemoglobin'],y=Smoking_Data['Gtp'],hue=Smoking_Data['smoking'])

"""KernalDenstiyEstamation Plot"""

sns.kdeplot(Smoking_Data['smoking'],fill=True,color='blue')

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['height(cm)'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Height')
plt.title('Bivariate Kde Plot')
plt.show()

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['weight(kg)'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Weight(kg)')
plt.title('Bivariate Kde Plot')
plt.show()

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['waist(cm)'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Waist(cm)')
plt.title('Bivariate Kde Plot')
plt.show()

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['triglyceride'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Triglyceride')
plt.title('Bivariate Kde Plot')
plt.show()

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['hemoglobin'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Hemoglobin')
plt.title('Bivariate Kde Plot')
plt.show()

plt.figure(figsize=(10,6))
sns.kdeplot(x=Smoking_Data['smoking'],y=Smoking_Data['Gtp'],fill=True,cmap='mako',thresh=0.05,levels=50)
plt.xlabel('Smoking')
plt.ylabel('Gtp')
plt.title('Bivariate Kde Plot')
plt.show()

"""HexBin Plot"""

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['height(cm)'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Height(cm)')
plt.title('Hexbin Plot')
plt.show()

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['weight(kg)'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Weight(kg)')
plt.title('Hexbin Plot')
plt.show()

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['waist(cm)'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Waist(cm)')
plt.title('Hexbin Plot')
plt.show()

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['triglyceride'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Triglyceride')
plt.title('Hexbin Plot')
plt.show()

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['hemoglobin'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Hemoglobin')
plt.title('Hexbin Plot')
plt.show()

plt.figure(figsize=(10,6))
plt.hexbin(Smoking_Data['smoking'],Smoking_Data['Gtp'],gridsize=30,cmap='Blues')
plt.colorbar(label="Density")
plt.xlabel('Smoking')
plt.ylabel('Gtp')
plt.title('Hexbin Plot')
plt.show()

"""2DHistogram Plot"""

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['height(cm)'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Height')
plt.title('2D Histogram')
plt.show()

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['weight(kg)'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Weight')
plt.title('2D Histogram')
plt.show()

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['waist(cm)'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Waist')
plt.title('2D Histogram')
plt.show()

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['triglyceride'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Triglyceride')
plt.title('2D Histogram')
plt.show()

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['hemoglobin'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Hemoglobin')
plt.title('2D Histogram')
plt.show()

plt.figure(figsize=(8,6))
plt.hist2d(x=Smoking_Data['smoking'],y=Smoking_Data['Gtp'],bins=30,cmap='plasma')
plt.colorbar(label='density')
plt.xlabel('Smoking')
plt.ylabel('Gtp')
plt.title('2D Histogram')
plt.show()

"""Joint Plot"""

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['height(cm)'],kind='kde',fill=True,cmap='mako')

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['weight(kg)'],kind='kde',fill=True,cmap='mako')

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['waist(cm)'],kind='kde',fill=True,cmap='mako')

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['triglyceride'],kind='kde',fill=True,cmap='mako')

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['hemoglobin'],kind='kde',fill=True,cmap='mako')

sns.jointplot(x=Smoking_Data['smoking'],y=Smoking_Data['Gtp'],kind='kde',fill=True,cmap='mako')

"""Spliting Data"""

X=Smoking_Data[['height(cm)','weight(kg)','waist(cm)','triglyceride','hemoglobin','Gtp']]

X

X.describe()

Y=Smoking_Data['smoking']

Y

"""Applying Machine Learning Models

RandomForest Classifier
"""

from sklearn.model_selection import train_test_split

X_Train,X_Test,Y_Train,Y_Test=train_test_split(X,Y,test_size=0.2,random_state=42)

X_Train

X_Test

Y_Train

Y_Test

from sklearn.ensemble import RandomForestClassifier

Rf=RandomForestClassifier(n_estimators=50,min_samples_leaf=3,random_state=1)

Rf.fit(X_Train,Y_Train)

ImportanceOfFeatures=Rf.feature_importances_

plt.figure(figsize=(10,9))
plt.bar(X.columns,ImportanceOfFeatures,color='skyblue')
plt.title('Importance Of Features')
plt.show()

Y_Predict_Train=Rf.predict(X_Train)

Y_Predict_Test=Rf.predict(X_Test)

"""Evaluation"""

from sklearn.metrics import r2_score,accuracy_score,precision_score,recall_score,f1_score,confusion_matrix

r2=r2_score(Y_Test,Y_Predict_Test)

r2

Accuracy=accuracy_score(Y_Test,Y_Predict_Test)

Accuracy

PrecisionScore=precision_score(Y_Test,Y_Predict_Test)

PrecisionScore

RecallScore=recall_score(Y_Test,Y_Predict_Test)

RecallScore

F1Score=f1_score(Y_Test,Y_Predict_Test)

F1Score

ConfusionMatrix=confusion_matrix(Y_Test,Y_Predict_Test)

ConfusionMatrix

"""LinearDiscriminant Analysis"""

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

Ld=LinearDiscriminantAnalysis()

Ld.fit(X_Train,Y_Train)

Y_Pred=Ld.predict(X_Test)

# تطبيق LDA واستخراج أول بعدين
lda = LinearDiscriminantAnalysis(n_components=1)
X_r = lda.fit(X, Y).transform(X)

# الرسم
colors = ['red', 'green']
plt.figure(figsize=(8,5))




plt.hist(X_r[Y==0], bins=30, alpha=0.7, label='Non Smoker', color='green')
plt.hist(X_r[Y==1], bins=30, alpha=0.7, label='Smoker', color="red")
plt.xlabel('Ld1')
plt.ylabel('Number Of Samples')
plt.title("Lda Projection (One Dimension)")
plt.legend()
plt.show()

"""Evaluation(2)"""

from sklearn.metrics import accuracy_score

print('Accuracy:', accuracy_score(Y_Test, Y_Pred))

from sklearn.svm import SVC

Svc=SVC(kernel='rbf',C=1.0,gamma='scale')

Svc.fit(X_Train,Y_Train)

Y_Predict_Train1=Svc.predict(X_Train)

Y_Predict_Test1=Svc.predict(X_Test)

"""Evaluation(2)"""

r2=r2_score(Y_Test,Y_Predict_Test1)

r2

Accuracy1=accuracy_score(Y_Test,Y_Predict_Test1)

Accuracy1

PrecisionScore1=precision_score(Y_Test,Y_Predict_Test1)

PrecisionScore1

RecallScore1=recall_score(Y_Test,Y_Predict_Test1)

RecallScore1

F1Score1=f1_score(Y_Test,Y_Predict_Test1)

F1Score1

ConfusionMatrix1=confusion_matrix(Y_Test,Y_Predict_Test1)

ConfusionMatrix1

"""KNearsetNeighbour Model"""

from sklearn.neighbors import KNeighborsClassifier

KNC=KNeighborsClassifier(n_neighbors=2)

KNC.fit(X_Train,Y_Train)

Y_Predict_Train2=KNC.predict(X_Train)

Y_Predict_Test2=KNC.predict(X_Test)

"""Evaluation(3)"""

r2=r2_score(Y_Test,Y_Predict_Test2)

r2

Accuracy2=accuracy_score(Y_Test,Y_Predict_Test2)

Accuracy2

PrecisionScore2=precision_score(Y_Test,Y_Predict_Test2)

PrecisionScore2

RecallScore2=recall_score(Y_Test,Y_Predict_Test2)

RecallScore2

F1Score2=f1_score(Y_Test,Y_Predict_Test2)

F1Score2

ConfusionMatrix2=confusion_matrix(Y_Test,Y_Predict_Test2)

ConfusionMatrix2

"""LogisticRegression Model"""

from sklearn.linear_model import LogisticRegression

Lr=LogisticRegression(penalty='l2',solver='lbfgs')

Lr.fit(X_Train,Y_Train)

Y_Predict_Train3=Lr.predict(X_Train)

Y_Predict_Test3=Lr.predict(X_Test)

"""Evaluation"""

r2=r2_score(Y_Test,Y_Predict_Test3)

r2

Accuracy3=accuracy_score(Y_Test,Y_Predict_Test3)

Accuracy3

PrecisionScore3=precision_score(Y_Test,Y_Predict_Test3)

PrecisionScore3

RecallScore3=recall_score(Y_Test,Y_Predict_Test3)

RecallScore3

F1Score3=f1_score(Y_Test,Y_Predict_Test3)

F1Score3

ConfusionMatrix3=confusion_matrix(Y_Test,Y_Predict_Test3)

ConfusionMatrix3

"""CrossValidation For RandomForestClassifier Model"""

from sklearn.model_selection import cross_val_score,KFold

Kf=KFold(n_splits=10,shuffle=True,random_state=42)

Scores=cross_val_score(Rf,X,Y,cv=Kf,scoring='accuracy')

Scores

MeanOfAccuracy=Scores.mean()

MeanOfAccuracy

"""GridSearchCv"""

from sklearn.model_selection import GridSearchCV

ParamGrid = {
   'n_estimators':[50,100,150,200],
   'min_samples_leaf':[3,5,7,9]
}

Grid_Search = GridSearchCV(
    estimator=Rf,
    param_grid=ParamGrid,
    scoring='accuracy',   # مقياس التقييم
    cv=5,                 # عدد الطيات في Cross Validation
    verbose=1,            # لعرض التقدم
    n_jobs=-1             # استخدام كل أنوية المعالج
)

Grid_Search.fit(X_Train,Y_Train)

print("Best Parameters: ", Grid_Search.best_params_)

print("Best Accuracy(Cross Validation):", Grid_Search.best_score_)

print("Accuracy On Test Set", Grid_Search.score(X_Test,Y_Test))

"""Comparsion Of Performance Between Different Models"""

def plot_model_comparison(results, metric='accuracy', kind='bar',
                          figsize=(10,6), title=None, annotate=True, sort=True):


    # تحويل البيانات إلى DataFrame
    if isinstance(results, dict):
        df = pd.DataFrame(results).T
        df.index.name = 'model'
        df = df.reset_index()
    elif isinstance(results, list):
        df = pd.DataFrame(results)
        if 'model' not in df.columns:
            raise ValueError("If results is a list, each item must include a 'model' key.")
    else:
        raise ValueError("results must be a dict or a list of dicts.")

    if metric not in df.columns:
        raise ValueError(f"Metric '{metric}' not found in results columns: {list(df.columns)}")

    plot_df = df[['model', metric]].copy()
    if sort:
        plot_df = plot_df.sort_values(by=metric, ascending=False).reset_index(drop=True)

    models = plot_df['model'].astype(str).tolist()
    values = plot_df[metric].astype(float).tolist()

    plt.figure(figsize=figsize)
    if kind == 'bar':
        x = np.arange(len(models))
        bars = plt.bar(x, values)
        plt.xticks(x, models, rotation=45, ha='right')
        plt.ylabel(metric)
        if title is None:
            title = f"Comparison of models by {metric}"
        plt.title(title)
        if annotate:
            for i, v in enumerate(values):
                plt.text(i, v + 0.01 * (max(values) - min(values) + 1e-9), f"{v:.3f}", ha='center', va='bottom')
        plt.tight_layout()
    elif kind == 'line':
        plt.plot(models, values, marker='o')
        plt.ylabel(metric)
        if title is None:
            title = f"Comparison of models by {metric} (line)"
        plt.title(title)
        if annotate:
            for i, v in enumerate(values):
                plt.text(i, v, f"{v:.3f}", ha='center', va='bottom')
        plt.tight_layout()
    else:
        raise ValueError("kind must be 'bar' or 'line'")

    plt.show()
    return plot_df

Results = {
    'Random Forest': {'accuracy': 0.87, 'precision': 0.82},
    'SVM': {'accuracy': 0.70, 'precision': 0.61},
    'KNN':{'accuracy': 0.78, 'precision': 0.87},
    'Logistic Regression': {'accuracy': 0.71, 'precision': 0.63}
}

plot_model_comparison(Results, metric='accuracy', kind='bar',
                      title='Model Accuracy Comparison')

plot_model_comparison(Results, metric='precision', kind='line',
                      title='Model Precision Comparison')

import joblib

Rf_Model=joblib.dump(Rf,'Rf.pkl')

"""Installing Streamlit And Ngrok(WebServer)"""

!pip install streamlit pyngrok

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app1.py
# import joblib
# import streamlit as st
# import pandas as pd
# 
# 
# Rf_Model=joblib.load('Rf.pkl')
# 
# st.title('Prediction Of Smoking Persons According To Their Properties(Physical Or Non Physical)')
# 
# 
# 
# Height=st.number_input('Please Enter Your Height in (Cm)')
# 
# 
# Weight=st.number_input('Please Enter Your Weight in (Kg)')
# 
# 
# Waist=st.number_input('Please Enter Your Waist in (Cm)')
# 
# 
# 
# Triglyceride=st.number_input('Please Enter Your Triglyceride Rate',1)
# 
# 
# 
# Hemoglobin=st.number_input('Please Enter Your Hemoglobin Rate',1)
# 
# 
# 
# Gtp=st.number_input('Please Enter Your Gtp Rate',0,1)
# 
# 
# 
# Button=st.button('Predict')
# if Button:
# 
#    Prediction=Rf_Model.predict(pd.DataFrame({'height(cm)':[Height],'weight(kg)':[Weight],'waist(cm)':[Waist],'triglyceride':[Triglyceride],'hemoglobin':[Hemoglobin],'Gtp':[Gtp]}))
# 
# if Prediction[0] == 0:
# 
# 
#  st.success(f'The Predicitied Status For This Person is:Non Smoker')
# 
# 
# 
# elif Prediction[0] == 1:
#   st.success(f'The Predicitied Status For This Person is:Smoker')
# 
#

"""Running Ui On Desktop"""

from pyngrok import ngrok

!streamlit run app1.py --server.port 8501 --server.headless true &>/dev/null&

!ngrok config add-authtoken 32MXqWXJ71X2BSMjYvtnWNqNfvm_7mVrdRrBDE6dKg4BmWi6A

ngrok.kill()

public_url = ngrok.connect(8501)
print("Link Of App", public_url)